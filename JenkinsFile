pipeline {
  agent any

  environment {
    AZURE_CREDENTIALS_ID = 'Azure-principle'
    AZURE_RESOURCE_GROUP = 'rg-finalproject3425'
    BACKEND_APP_NAME     = 'edusync-backend-api1'
    FRONTEND_APP_NAME    = 'edusync-frontend03'
    NODE_VERSION         = '18.x'
  }

  tools {
    nodejs "${NODE_VERSION}"
  }

  stages {
    stage('Checkout Code') {
      steps {
        git url: 'https://github.com/sakshimathur03/EduSyncProject.git', branch: 'main'
      }
    }

    stage('Terraform Init, Plan & Apply') {
      steps {
        dir('terraform') {
          withCredentials([file(credentialsId: "${AZURE_CREDENTIALS_ID}", variable: 'AZURE_CREDS')]) {
            bat 'for /f "delims=" %i in (\"%AZURE_CREDS%\") do set AZURE_CONTENT=%i'
            bat 'powershell -Command "Get-Content %AZURE_CREDS% | Out-String | Write-Output"'
            // We need to extract JSON fields in Windows batch, easier with PowerShell:
            bat '''
              powershell -Command "$json = Get-Content %AZURE_CREDS% | ConvertFrom-Json; \
              [Environment]::SetEnvironmentVariable('ARM_CLIENT_ID', $json.clientId); \
              [Environment]::SetEnvironmentVariable('ARM_CLIENT_SECRET', $json.clientSecret); \
              [Environment]::SetEnvironmentVariable('ARM_SUBSCRIPTION_ID', $json.subscriptionId); \
              [Environment]::SetEnvironmentVariable('ARM_TENANT_ID', $json.tenantId)"
            '''
            bat 'terraform init'
            bat 'terraform plan -out=tfplan'
            bat 'terraform apply -auto-approve tfplan'
          }
        }
      }
    }

    stage('Build Backend (.NET)') {
      steps {
        dir('backend') {
          bat 'dotnet restore'
          bat 'dotnet build --configuration Release'
          bat 'dotnet publish --configuration Release -o publish'
        }
      }
    }

    stage('Package Backend Artifact') {
      steps {
        dir('backend') {
          bat 'powershell -Command "Compress-Archive -Path publish\\* -DestinationPath backend_publish.zip -Force"'
        }
      }
    }

    stage('Deploy Backend to Azure') {
      steps {
        withCredentials([file(credentialsId: "${AZURE_CREDENTIALS_ID}", variable: 'AZURE_CREDS')]) {
          bat '''
            powershell -Command "$json = Get-Content %AZURE_CREDS% | ConvertFrom-Json; \
            $env:CLIENT_ID = $json.clientId; \
            $env:CLIENT_SECRET = $json.clientSecret; \
            $env:TENANT_ID = $json.tenantId; \
            $env:SUBSCRIPTION_ID = $json.subscriptionId; \
            az login --service-principal -u $env:CLIENT_ID -p $env:CLIENT_SECRET --tenant $env:TENANT_ID; \
            az account set --subscription $env:SUBSCRIPTION_ID; \
            az webapp deploy --resource-group ${AZURE_RESOURCE_GROUP} --name ${BACKEND_APP_NAME} --src-path backend\\backend_publish.zip --type zip"
          '''
        }
      }
    }

    stage('Build Frontend (React)') {
      steps {
        dir('frontend') {
          bat 'npm install'
          bat 'npm run build'
        }
      }
    }

    stage('Package Frontend Artifact') {
      steps {
        dir('frontend') {
          bat 'powershell -Command "Compress-Archive -Path build\\* -DestinationPath frontend_build.zip -Force"'
        }
      }
    }

    stage('Deploy Frontend to Azure') {
      steps {
        withCredentials([file(credentialsId: "${AZURE_CREDENTIALS_ID}", variable: 'AZURE_CREDS')]) {
          bat '''
            powershell -Command "$json = Get-Content %AZURE_CREDS% | ConvertFrom-Json; \
            $env:CLIENT_ID = $json.clientId; \
            $env:CLIENT_SECRET = $json.clientSecret; \
            $env:TENANT_ID = $json.tenantId; \
            $env:SUBSCRIPTION_ID = $json.subscriptionId; \
            az login --service-principal -u $env:CLIENT_ID -p $env:CLIENT_SECRET --tenant $env:TENANT_ID; \
            az account set --subscription $env:SUBSCRIPTION_ID; \
            az webapp deploy --resource-group ${AZURE_RESOURCE_GROUP} --name ${FRONTEND_APP_NAME} --src-path frontend\\frontend_build.zip --type zip"
          '''
        }
      }
    }
  }

  post {
    success {
      echo 'Deployment completed successfully!'
    }
    failure {
      echo 'Deployment failed!'
    }
  }
}
